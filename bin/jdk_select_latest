#! /usr/bin/env python3
# coding=utf-8

import re
import sys

PY3 = sys.version_info[0] == 3

pattern = re.compile('(?<=jdk).*?(?=\\.jdk)')

major_version_pattern = re.compile('(?<=^)\\d+\\.\\d+\\.\\d+(?=_)')

minor_version_pattern = re.compile('(?<=_)\\d+(?=$)')


def asc_order(x, y):
    find_x = pattern.findall(x)
    find_y = pattern.findall(y)
    if find_x and find_y:
        x_processed = find_x[0]
        y_processed = find_x[0]

        if major_version_pattern.findall(x_processed) > major_version_pattern.findall(y_processed):
            return 1
        elif major_version_pattern.findall(x_processed) == major_version_pattern.findall(y_processed):
            if int(minor_version_pattern.findall(x_processed)[0]) > int(minor_version_pattern.findall(y_processed)[0]):
                return 1
            elif int(minor_version_pattern.findall(x_processed)[0]) == int(
                    minor_version_pattern.findall(y_processed)[0]):
                return 0
            else:
                return -1
        else:
            return -1


def desc_order(x, y):
    return asc_order(y, x)


def main():
    input_src = []

    f = sys.stdin

    for line in f.readlines():
        if pattern.search(line):
            input_src.append(line)

    # import os
    # for line in os.listdir('/Library/Java/JavaVirtualMachines/'):
    #     if pattern.search(line):
    #         input_src.append(line)

    if PY3:
        import functools

        sorted_input_src = sorted(input_src, key=functools.cmp_to_key(desc_order))
    else:
        sorted_input_src = sorted(input_src, cmp=desc_order)

    sys.stdout.write(sorted_input_src[0])


if __name__ == "__main__":
    main()

