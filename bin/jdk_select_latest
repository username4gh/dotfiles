#! /usr/bin/env python3
# coding=utf-8

import re
import sys
import typing

PY3 = sys.version_info[0] == 3

pattern = re.compile('(?<=jdk)[-]*[.0-9_]*(?=\\.jdk)')

version = re.compile('[.0-9_]+(?=\\.jdk)')

major_version = re.compile('(?<=^)\\d+\\.\\d+\\.\\d+')

minor_version = re.compile('(?<=_)\\d+(?=$)')


def extract(p: typing.Pattern, source: str) -> str:
    result = p.findall(source)
    if len(result) == 0:
        return "0"
    else:
        return result[0]


def asc_order(x: str, y: str) -> int:
    version_x = extract(version, x)
    version_y = extract(version, y)
    major_version_x = extract(major_version, version_x)
    major_version_y = extract(major_version, version_y)

    if major_version_x > major_version_y:
        return 1
    elif major_version_x == major_version_y:
        minor_version_x = extract(minor_version, version_x)
        minor_version_y = extract(minor_version, version_y)

        if minor_version_x > minor_version_y:
            return 1
        elif minor_version_x == minor_version_y:
            return 0
        else:
            return -1
    else:
        return -1


def desc_order(x, y):
    return asc_order(y, x)


def main():
    input_src = []

    f = sys.stdin

    for line in f.readlines():
        if pattern.search(line):
            input_src.append(line)

    #import os
    #for line in os.listdir('/Library/Java/JavaVirtualMachines/'):
    #    if pattern.search(line):
    #        input_src.append(line)

    if PY3:
        import functools

        sorted_input_src = sorted(input_src, key=functools.cmp_to_key(desc_order))
    else:
        sorted_input_src = sorted(input_src, cmp=desc_order)

    sys.stdout.write(sorted_input_src[0])


if __name__ == "__main__":
    main()

