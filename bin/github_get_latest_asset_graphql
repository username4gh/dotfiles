#! /usr/bin/env python3

from __future__ import print_function

from json import loads, dumps
import os
import sys

PY2 = sys.version_info[0] == 2
PY3 = sys.version_info[0] == 3


def query_string(name, owner):
    return """query asset {
  repository(name: \"%s\", owner: \"%s\") {
    releases(orderBy: {field: CREATED_AT, direction: ASC}, last: 1) {
      nodes {
        releaseAssets(last: 1) {
          nodes {
            downloadUrl
          }
        }
      }
    }
  }
}    
    """ % (name, owner)


def main(argv):
    if len(argv) != 2:
        print("""
        usage: github_get_latest_asset <full-repo-name>

        full-repo-name would be likely in these form:

        org-name/repo-name

        author-name/repo-name
        """)
        return

    if PY2:
        import urllib2 as urllib
    elif PY3:
        # noinspection PyUnresolvedReferences
        import urllib.request as urllib
    else:
        return

    # https://stackoverflow.com/questions/554446/how-do-i-prevent-pythons-urllib2-from-following-a-redirect
    class NoRedirection(urllib.HTTPErrorProcessor):

        def __init__(self):
            pass

        def http_response(self, req, resp):
            return resp

        https_response = http_response

    opener = urllib.build_opener(NoRedirection)
    urllib.install_opener(opener)

    name = argv[1].split("/")[1]
    owner = argv[1].split("/")[0]
    request = urllib.Request('https://api.github.com/graphql', data=bytes(dumps({'query': query_string(name, owner)}), 'utf-8'),
                             method='POST')
    request.add_header("Authorization", "Bearer %s" % os.getenv("HOMEBREW_GITHUB_API_TOKEN"))

    try:
        response = urllib.urlopen(request)

        if response.code == 200:
            x = loads(response.read())

            try:
                print(x['data']['repository']['releases']['nodes'][0]['releaseAssets']['nodes'][0]['downloadUrl'])
            except KeyError:
                print(x)
        else:
            print('code: %s, msg: %s, response: %s' % (str(response.code), response.msg, response.readlines()))
    except IOError as err:
        print(err)


if __name__ == "__main__":
    sys.exit(main(sys.argv))

