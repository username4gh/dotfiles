#! /usr/bin/env _python
# coding=utf-8

from __future__ import print_function
import optparse
import sys

PY3 = sys.version_info[0] == 3


def _process_line(options):
    try:
        if options.input is None:
            f = sys.stdin
        else:
            f = open(options.input, 'r')
        lines = f.readlines()
        f.close()
    except IOError as err:
        print(err)
        return 1

    func = eval(options.lambda_string)

    for i in range(0, len(lines)):
        lines[i] = func(lines[i])

    try:
        if options.in_place:
            f = open(options.input, 'w')
        elif options.output is None:
            f = sys.stdout
        else:
            f = open(options.output, 'w')
        # here we use the completely-override-write to make it's easy to implement in-place edit
        f.writelines(lines)
        f.close()
    except IOError as err:
        print(err)


def main():
    parser = optparse.OptionParser(optparse.SUPPRESS_USAGE)
    parser.add_option('--in-place', dest='in_place', action='store_true', help='edit the file in-place')
    parser.add_option('--input', dest='input', type='string', help='the input file, in-omittable')
    parser.add_option('--output', dest='output', type='string', help='the output file, omittable')
    parser.add_option('--lambda-string', dest='lambda_string', type='string', help='\"lambda x:x.something()\", here we assume x is str, also the double quote is necessary')
    options, args = parser.parse_args()

    if options.input is None or options.lambda_string is None:
        parser.print_help()
        exit(1)
    else:
        _process_line(options)


if __name__ == '__main__':
    main()

