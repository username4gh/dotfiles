#! /usr/bin/env python3

from __future__ import print_function

import argparse
import collections
import os
import re
import string
import sys
import typing

PY2 = sys.version_info[0] == 2
PY3 = sys.version_info[0] == 3

if PY2:
    import importlib
    import pkgutil
    import sys


    def find_module(full_module_name):
        """
        Returns module object if module `full_module_name` can be imported.

        Returns None if module does not exist.

        Exception is raised if (existing) module raises exception during its import.
        """
        module = sys.modules.get(full_module_name)
        if module is None:
            module_path_tail = full_module_name.split('.')
            module_path_head = []
            loader = True
            while module_path_tail and loader:
                module_path_head.append(module_path_tail.pop(0))
                module_name = ".".join(module_path_head)
                loader = bool(pkgutil.find_loader(module_name))
                if not loader:
                    # Double check if module realy does not exist
                    # (case: full_module_name == 'paste.deploy')
                    try:
                        importlib.import_module(module_name)
                    except ImportError:
                        pass
                    else:
                        loader = True
            if loader:
                module = importlib.import_module(full_module_name)
        return module

if PY3:
    import importlib


    def find_module(full_module_name):
        """
        Returns module object if module `full_module_name` can be imported.
        Returns None if module does not exist.
        Exception is raised if (existing) module raises exception during its import.
        """
        try:
            return importlib.import_module(full_module_name)
        except ImportError as exc:
            if not (full_module_name + '.').startswith(exc.name + '.'):
                raise

# Constants -------------------------------------------------------------------
CASE_SENSITIVE = 1
CASE_INSENSITIVE = 2
CASE_SMART = 3

TYPE_FILE_REAL = 1
TYPE_FILE_SYMLINK = 2
TYPE_DIR_REAL = 3
TYPE_DIR_SYMLINK = 4

TYPES_FILE_REAL = {TYPE_FILE_REAL}
TYPES_FILE_SYMLINK = {TYPE_FILE_SYMLINK}
TYPES_DIR_REAL = {TYPE_DIR_REAL}
TYPES_DIR_SYMLINK = {TYPE_DIR_SYMLINK}

TYPES_FILE = TYPES_FILE_REAL | TYPES_FILE_SYMLINK
TYPES_DIR = TYPES_DIR_REAL | TYPES_DIR_SYMLINK

TYPES_REAL = TYPES_FILE_REAL | TYPES_DIR_REAL
TYPES_SYMLINK = TYPES_FILE_SYMLINK | TYPES_DIR_SYMLINK

TYPES_ALL = TYPES_FILE | TYPES_DIR

FILE_TYPES = " a (all)\n f (files)\n d (dirs)\n r (real)\n s (symlinked)\n e (real files)\n c (real dirs)\n x (" \
             "symlinked files)\n y (symlinked dirs)\n "


# Output ----------------------------------------------------------------------
def out(options, s: str) -> None:
    sys.stdout.write(s + ('\0' if options.zero else '\n'))


def err(options, s: str) -> None:
    sys.stderr.write(s + ('\0' if options.zero else '\n'))


def die(options, s: str, exitcode: int = 1) -> None:
    err(options, 'error: ' + s)
    sys.exit(exitcode)


def warn(s: str) -> None:
    sys.stderr.write('warning: ' + s + '\n')


# Hidden-ess ----------------------------------------------------------------------
def is_macos() -> bool:
    if 'darwin' in sys.platform:
        return True
    return False


def is_windows() -> bool:
    if 'window' in sys.platform:
        return True
    return False


def is_linux() -> bool:
    if 'linux' in sys.platform:
        return True
    return False


# https://stackoverflow.com/questions/284115/cross-platform-hidden-file-detection
if is_macos():

    import contextlib
    import ctypes

    cf = ctypes.cdll.LoadLibrary('/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation')

    cf.CFShow.argtypes = [ctypes.c_void_p]
    cf.CFShow.restype = None

    cf.CFRelease.argtypes = [ctypes.c_void_p]
    cf.CFRelease.restype = None

    cf.CFStringCreateWithBytes.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long, ctypes.c_int, ctypes.c_int]
    cf.CFStringCreateWithBytes.restype = ctypes.c_void_p

    cf.CFStringGetMaximumSizeOfFileSystemRepresentation.argtypes = [ctypes.c_void_p]
    cf.CFStringGetMaximumSizeOfFileSystemRepresentation.restype = ctypes.c_int

    cf.CFStringGetFileSystemRepresentation.argtypes = [ctypes.c_void_p,
                                                       ctypes.c_char_p,
                                                       ctypes.c_long]
    cf.CFStringGetFileSystemRepresentation.restype = ctypes.c_int

    cf.CFURLCreateFromFileSystemRepresentation.argtypes = [ctypes.c_void_p,
                                                           ctypes.c_char_p,
                                                           ctypes.c_long,
                                                           ctypes.c_int]
    cf.CFURLCreateFromFileSystemRepresentation.restype = ctypes.c_void_p

    cf.CFURLCopyResourcePropertyForKey.argtypes = [ctypes.c_void_p,
                                                   ctypes.c_void_p,
                                                   ctypes.c_void_p,
                                                   ctypes.c_void_p]
    cf.CFURLCopyResourcePropertyForKey.restype = ctypes.c_int

    cf.CFBooleanGetValue.argtypes = [ctypes.c_void_p]
    cf.CFBooleanGetValue.restype = ctypes.c_int

    cf.CFURLEnumeratorCreateForDirectoryURL.argtypes = [ctypes.c_void_p,
                                                        ctypes.c_void_p,
                                                        ctypes.c_int,
                                                        ctypes.c_void_p]
    cf.CFURLEnumeratorCreateForDirectoryURL.restype = ctypes.c_void_p

    cf.CFURLEnumeratorGetNextURL.argtypes = [ctypes.c_void_p,
                                             ctypes.c_void_p,
                                             ctypes.c_void_p]
    cf.CFURLEnumeratorGetNextURL.restype = ctypes.c_int

    cf.CFURLCopyFileSystemPath.argtypes = [ctypes.c_void_p, ctypes.c_int]
    cf.CFURLCopyFileSystemPath.restype = ctypes.c_void_p

    # From CFString.h
    # http://www.opensource.apple.com/source/CF/CF-744/CFString.h
    # The value has been the same from at least 10.2-10.8.
    kCFStringEncodingUTF8 = 0x08000100

    # Documented here:
    # https://developer.apple.com/library/mac/#documentation/CoreFoundation/Reference/CFURLEnumeratorRef/Reference/reference.html
    kCFURLEnumeratorSkipInvisibles = 1 << 1

    kCFURLEnumeratorSuccess = 1
    kCFURLEnumeratorEnd = 2
    kCFURLEnumeratorError = 3
    kCFURLEnumeratorDirectoryPostOrderSuccess = 4

    # Documented here:
    # http://developer.apple.com/library/ios/#documentation/CoreFoundation/Reference/CFURLRef/Reference/reference.html
    kCFURLPOSIXPathStyle = 0

    # This one is a static CFStringRef.
    kCFURLIsHiddenKey = ctypes.c_void_p.in_dll(cf, 'kCFURLIsHiddenKey')


    @contextlib.contextmanager
    def cfreleasing(stuff):
        try:
            yield
        finally:
            for thing in stuff:
                cf.CFRelease(thing)


    def cfstr_to_unicode(cfstr):
        count = cf.CFStringGetMaximumSizeOfFileSystemRepresentation(cfstr)
        buf = (ctypes.c_char * count)()
        if cf.CFStringGetFileSystemRepresentation(cfstr, buf, count):
            return buf.value.decode('UTF-8')
        raise OSError('CFStringGetFileSystemRepresentation failed')


    def is_hidden(path):
        if not isinstance(path, bytes):
            path = path.encode('UTF-8')
        stuff = []
        with cfreleasing(stuff):
            url = cf.CFURLCreateFromFileSystemRepresentation(None, path, len(path), False)
            stuff.append(url)
            val = ctypes.c_void_p(0)
            ret = cf.CFURLCopyResourcePropertyForKey(url, kCFURLIsHiddenKey, ctypes.addressof(val), None)
            if ret:
                result = cf.CFBooleanGetValue(val)
                stuff.append(val)
                return True if result else False
            # TODO: You could pass a CFErrorRef instead of None, and do all the
            # work to wrap that in a Python exception, etc.
            raise OSError('CFURLCopyResourcePropertyForKey failed')


    def listdir_skipping_hidden(path):
        if not isinstance(path, bytes):
            path = path.encode('UTF-8')
        stuff = []
        with cfreleasing(stuff):
            url = cf.CFURLCreateFromFileSystemRepresentation(None, path, len(path), True)
            stuff.append(url)
            enum = cf.CFURLEnumeratorCreateForDirectoryURL(None, url, kCFURLEnumeratorSkipInvisibles, None)
            stuff.append(enum)
            paths = []
            while True:
                url = ctypes.c_void_p(0)
                ret = cf.CFURLEnumeratorGetNextURL(enum, ctypes.addressof(url), None)
                if ret != kCFURLEnumeratorSuccess:
                    break
                path = cf.CFURLCopyFileSystemPath(url, kCFURLPOSIXPathStyle)
                stuff.append(path)
                paths.append(cfstr_to_unicode(path))
            return paths

if is_windows():
    PY35 = sys.version_info[0] == 3 and sys.version_info[1] >= 5

    import ctypes


    def is_hidden(file_path: str) -> bool:
        return has_hidden_attribute(file_path)


    def has_hidden_attribute(file_path: str) -> bool:
        if is_windows():
            if PY35:
                import stat
                stats: os.stat_result = os.stat(file_path)
                return bool(stats.st_file_attributes & stat.FILE_ATTRIBUTE_HIDDEN)

            if PY2:
                try:
                    # noinspection PyUnresolvedReferences
                    attrs = ctypes.windll.kernel64.GetFileAttributesW(unicode(file_path))
                    assert attrs != -1
                    result = bool(attrs & 2)
                except (AttributeError, AssertionError):
                    result = False
                return result
            return False
        else:
            return False

if is_linux():
    def is_hidden(file_path: str) -> bool:
        name = os.path.basename(os.path.abspath(file_path))
        return name.startswith('.')


# Searching! ------------------------------------------------------------------
def get_type(path):
    is_link = os.path.islink(path)
    is_dir = os.path.isdir(path)

    if is_link and is_dir:
        return TYPE_DIR_SYMLINK
    elif is_link and not is_dir:
        return TYPE_FILE_SYMLINK
    elif not is_link and is_dir:
        return TYPE_DIR_REAL
    elif not is_link and not is_dir:
        return TYPE_FILE_REAL


def match(options, query, path, basename):
    def _match():
        if not query(path if options.entire else basename):
            # because cpu is generally much faster than IO
            # here we check name first, do a fast-fail, then we check type_info
            return False

        type_info = get_type(path)

        if type_info not in options.type:
            return False

        if (not options.binary) and (type_info in TYPES_FILE):
            # Resolve symlinks
            target = os.path.realpath(path) if type_info in TYPES_SYMLINK else path

            # Ignore broken symlinks (treating them as non-binary)
            if os.path.exists(target):
                # We open in non-blocking mode so things like file-based sockets
                # don't hang while waiting for reading th full kb.
                fd = os.open(target, os.O_NONBLOCK)
                with os.fdopen(fd) as f:
                    if '\0' in f.read(1024):
                        return False

        return True

    result = _match()
    return not result if options.invert else result


def _search(options, query, root, depth):
    try:
        contents = os.listdir(root)
    except OSError:
        err(options, 'Error: `' + root + '`: Permission denied')
        return

    dirs = []

    for item in contents:
        path = os.path.join(root, item)

        if options.ignore_hidden and is_hidden(path):
            continue

        is_dir = os.path.isdir(path)

        if is_dir:
            if options.follow or not os.path.islink(path):
                dirs.append(path)
        if match(options, query, path, item):
            if depth >= options.mindepth:
                out(options, path)

    if depth < options.maxdepth:
        for d in dirs:
            _search(options, query, d, depth + 1)


def _parallel_search(options, query, directory):
    import signal
    from pathos import multiprocessing as mp
    from scandir import scandir, walk

    def initializer() -> None:
        """Ignore CTRL+C in the worker process."""
        signal.signal(signal.SIGINT, signal.SIG_IGN)

    pool = mp.Pool(mp.cpu_count(), initializer=initializer)

    def walk_with_depth_limit(some_dir, maxdepth=1) -> collections.Iterable:
        some_dir = some_dir.rstrip(os.path.sep)
        assert os.path.isdir(some_dir)
        num_sep = some_dir.count(os.path.sep)
        for dir_path, dir_names, file_names in walk(some_dir, topdown=True):
            yield dir_path, dir_names, file_names
            num_sep_this = dir_path.count(os.path.sep)
            if num_sep + maxdepth <= num_sep_this:
                del dir_names[:]

    def process_file_path(root) -> None:
        try:
            for (dir_path, dir_names, file_names) in walk_with_depth_limit(root, options.maxdepth - 1):
                for dir_name in dir_names:
                    if match(options, query, dir_path, dir_name):
                        dir_path = os.path.join(dir_path, dir_name)
                        out(options, dir_path)
                for filename in file_names:
                    if match(options, query, dir_path, filename):
                        file_path = os.path.join(dir_path, filename)
                        out(options, file_path)
        except KeyboardInterrupt:
            pass

    def generate_file_paths() -> typing.Generator:
        try:
            for entry in scandir(directory):
                if entry.is_dir():
                    yield entry.path
                else:
                    if match(options, query, directory, entry.name):
                        out(options, entry.name)
        except KeyboardInterrupt:
            pass

    try:
        for _ in pool.imap(process_file_path, generate_file_paths()):
            pass
        pool.close()
    except KeyboardInterrupt:
        pool.terminate()
        pool.join()


def search(options, query, directory='.', depth=1) -> None:
    if options.parallel and find_module('pathos.multiprocessing') and find_module("scandir"):
        _parallel_search(options, query, directory)
    else:
        _search(options, query, directory, depth)


# Option Parsing and Main -----------------------------------------------------
def build_option_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser("usage: %prog [options] PATTERN",
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-v', '--verbose', default=False, dest='verbose', action='store_true',
                        help="verbose mode")
    # Main options
    group = parser.add_argument_group("Dir configuration")
    group.add_argument('--root-dir', default='.',
                       dest='dir', action='store',
                       help='root the search in DIR (default .)',
                       metavar='DIR')
    group.add_argument('--mindepth', default='1',
                       help='search at minimum N directories deep (default 1)',
                       metavar='N')
    group.add_argument('--maxdepth', default='25',
                       help='search at most N directories deep (default 25)',
                       metavar='N')
    group.add_argument('--follow',
                       dest='follow', action='store_true', default=False,
                       help='follow symlinked directories and search their contents')
    group.add_argument('--no-follow',
                       dest='follow', action='store_false',
                       help="don't follow symlinked directories (default)")
    group.add_argument('--ignore-hidden',
                       dest='ignore_hidden', action='store_true', default=True,
                       help='include the hidden file into the result, disable by default')
    parser.add_argument_group(group)

    group = parser.add_argument_group("Matching Configuration")
    group.add_argument('--literal',
                       action='store_true', default=False,
                       help='force literal search, even if it looks like a regex')
    group.add_argument('--invert',
                       action='store_true', default=False,
                       help='invert match')
    group.add_argument('--entire', dest='entire',
                       action='store_true', default=False,
                       help='match PATTERN against the entire path string')
    group.add_argument('--non-entire', dest='entire',
                       action='store_false',
                       help='match PATTERN against only the filename (default)')
    parser.add_argument_group(group)

    group = parser.add_argument_group("Output Configuration")
    group.add_argument('--print0', dest='zero',
                       action='store_true', default=False,
                       help='separate matches with a null byte in output')
    parser.add_argument_group(group)

    # Concurrent
    group = parser.add_argument_group("Concurrent Configuration")
    group.add_argument('-p', '--parallel', dest='parallel', action='store_true', default=False,
                       help='using parallel searching, will ignore options: --mindepth, --maxdepth, --type')
    parser.add_argument_group(group)
    # Case sensitivity
    group = parser.add_argument_group("Configuring Case Sensitivity")
    group.add_argument('--case-sensitive',
                       dest='case', action='store_const', const=CASE_SENSITIVE,
                       default=CASE_SENSITIVE,
                       help='case sensitive matching (default)')
    group.add_argument('-i', '--case-insensitive',
                       dest='case', action='store_const', const=CASE_INSENSITIVE,
                       help='case insensitive matching')
    group.add_argument('--case-smart',
                       dest='case', action='store_const', const=CASE_SMART,
                       help='smart case matching (sensitive if any uppercase chars '
                            'are in the pattern, insensitive otherwise)')
    parser.add_argument_group(group)

    # Ignoring
    group = parser.add_argument_group("Configuring Ignoring")
    group.add_argument('--no-binary',
                       dest='binary', action='store_false', default=True,
                       help='ignore binary files')
    parser.add_argument_group(group)

    # Type filtering
    group = parser.add_argument_group("Type Filtering",
                                      "Possible types are:\n%s"
                                      "If multiple types are given, they will be unioned together:  "
                                      "--type 'es' would match real files and all symlinks." % FILE_TYPES)
    group.add_argument('-t', '--type',
                       action='store', default='a', metavar='TYPE(S)',
                       help='match only specific types of things (files, dirs, non-symlinks, symlinks)')
    parser.add_argument_group(group)

    return parser


def build_type_set(options):
    if options.type is None:
        return TYPES_ALL

    result = set()
    for c in options.type:
        if c not in 'aexcyfdrs':
            die(options, "invalid type specification\n\n"
                         "valid types:\n\n%s" % FILE_TYPES)

        result = result | {
            'a': TYPES_ALL,

            'e': TYPES_FILE_REAL,
            'x': TYPES_FILE_SYMLINK,
            'c': TYPES_DIR_REAL,
            'y': TYPES_DIR_SYMLINK,

            'f': TYPES_FILE,
            'd': TYPES_DIR,

            'r': TYPES_REAL,
            's': TYPES_SYMLINK,
        }[c]

    return result


def is_re(s):
    """Try to guess if the string is a regex.
    Err on the side of "True", because treating a literal like a regex only
    slows you down a bit, but the other way around is broken behaviour.
    """

    return not all(c.lower() in string.ascii_letters + '_-' for c in s)


def main(argv):
    parser = build_option_parser()

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(0)

    options: argparse.Namespace
    args: list[str]
    options, args = parser.parse_known_args(argv[1:])

    if options.verbose:
        print(args)

    if len(args) > 1:
        die("only one search pattern can be given")
        sys.exit(1)

    query = args[0] if args else ''

    # --root-dir
    if options.dir is not None:
        if not (os.path.exists(options.dir) and os.path.isdir(options.dir)):
            die('root-dir "%s" not exists' % options.dir)

    # --mindepth
    try:
        options.mindepth = int(options.mindepth)
    except ValueError:
        die('mindepth must be a non-negative integer')

    # --maxdepth
    try:
        options.maxdepth = int(options.maxdepth)
    except ValueError:
        die('maxdepth must be a non-negative integer')

    # --case-*
    if options.case == CASE_SMART:
        # in case_smart mode, if there is any one uppercase char in query, we assumes it's case-sensitive
        if any(c.isupper() for c in query):
            options.case = CASE_SENSITIVE
        else:
            options.case = CASE_INSENSITIVE

    # --type
    options.type = build_type_set(options)

    # Build the query matcher.
    if options.literal or not is_re(query):
        if options.case == CASE_SENSITIVE:
            literal = query
            query = lambda s: literal in s
        else:
            literal = query.lower()
            query = lambda s: literal in s.lower()
    else:
        if options.case == CASE_SENSITIVE:
            r = re.compile(query)
        else:
            r = re.compile(query, re.IGNORECASE)
        query = lambda s: r.search(s)

    search(options, query, options.dir)


if __name__ == '__main__':
    main(sys.argv)

