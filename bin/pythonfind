#! /usr/bin/env python

from __future__ import print_function
import errno
import os
import re
import string
import sys
from optparse import OptionParser, OptionGroup

# Constants -------------------------------------------------------------------
VERSION = ('1', '0', '0')
CASE_SENSITIVE = 1
CASE_INSENSITIVE = 2
CASE_SMART = 3

TYPE_FILE_REAL = 1
TYPE_FILE_SYMLINK = 2
TYPE_DIR_REAL = 3
TYPE_DIR_SYMLINK = 4

TYPES_FILE_REAL = {TYPE_FILE_REAL}
TYPES_FILE_SYMLINK = {TYPE_FILE_SYMLINK}
TYPES_DIR_REAL = {TYPE_DIR_REAL}
TYPES_DIR_SYMLINK = {TYPE_DIR_SYMLINK}

TYPES_FILE = TYPES_FILE_REAL | TYPES_FILE_SYMLINK
TYPES_DIR = TYPES_DIR_REAL | TYPES_DIR_SYMLINK

TYPES_REAL = TYPES_FILE_REAL | TYPES_DIR_REAL
TYPES_SYMLINK = TYPES_FILE_SYMLINK | TYPES_DIR_SYMLINK

TYPES_ALL = TYPES_FILE | TYPES_DIR

IGNORE_SYNTAX_REGEX = 1
IGNORE_SYNTAX_GLOB = 2
IGNORE_SYNTAX_LITERAL = 3

# Global Options --------------------------------------------------------------
options = None


# Output ----------------------------------------------------------------------
def out(s, line_ending='\n'):
    sys.stdout.write(s + line_ending)


def err(s):
    sys.stderr.write(s + '\n')


def die(s, exitcode=1):
    err('error: ' + s)
    sys.exit(exitcode)


def warn(s):
    sys.stderr.write('warning: ' + s + '\n')


# Ignore Files ----------------------------------------------------------------
def compile_re(line):
    try:
        r = re.compile(line)
        return lambda s: r.search(s)
    except:
        warn('could not compile regular expression "%s"' % line)
        return lambda s: False


def glob_to_re(glob):
    pat = ''

    chs = list(glob)
    while chs:
        ch = chs.pop(0)
        if ch == '\\':
            pat += re.escape(chs.pop(0))
        elif ch == '?':
            pat += '.'
        elif ch == '*':
            if chs and chs[0] == '*':
                chs.pop(0)
                pat += '.*'
            else:
                pat += '[^/]*'
        elif ch == '[':
            pat += '['
            ch = chs.pop(0)
            while chs and ch != ']':
                pat += ch
                ch = chs.pop(0)
            pat += ']'
        else:
            pat += re.escape(ch)

    return pat

# Searching! ------------------------------------------------------------------
def get_type(path):
    is_link = os.path.islink(path)
    is_dir = os.path.isdir(path)

    if is_link and is_dir:
        return TYPE_DIR_SYMLINK
    elif is_link and not is_dir:
        return TYPE_FILE_SYMLINK
    elif not is_link and is_dir:
        return TYPE_DIR_REAL
    elif not is_link and not is_dir:
        return TYPE_FILE_REAL


# noinspection PyUnusedLocal
def should_ignore(basename, path, ignorers):
    if ignorers is None:
        return False

    for i in ignorers:
        if i(path):
            return True

    return False


def match(query, path, basename):
    def _match():
        type_info = get_type(path)

        if type_info not in options.type:
            return False

        if not query(path if options.entire else basename):
            return False

        if (not options.binary) and (type_info in TYPES_FILE):
            # Resolve symlinks
            target = os.path.realpath(path) if type_info in TYPES_SYMLINK else path

            # Ignore broken symlinks (treating them as non-binary)
            if os.path.exists(target):
                # We open in non-blocking mode so things like file-based sockets
                # don't hang while waiting for their full kb.
                # TODO: Ignore those altogether for the binary check?
                fd = os.open(target, os.O_NONBLOCK)
                with os.fdopen(fd) as f:
                    if '\0' in f.read(1024):
                        return False

        return True

    result = _match()
    return not result if options.invert else result


def _search(query, root, depth, ignorers):
    try:
        contents = os.listdir(root)
    except OSError:
        err('Error: `' + root + '`: Permission denied')
        return

    dirs = []

    for item in contents:
        path = os.path.join(root, item)
        if options.full_path:
            path = os.path.abspath(path)

        is_dir = os.path.isdir(path)

        if not should_ignore(item, path, ignorers):
            if is_dir:
                if options.follow or not os.path.islink(path):
                    dirs.append(path)
            if match(query, path, item):
                if depth >= options.mindepth:
                    out(path, '\0' if options.zero else '\n')

    if depth < options.maxdepth:
        for d in dirs:
            _search(query, d, depth + 1, ignorers)


def search(query, directory='.', depth=1, ignorers=None):
    _search(query, directory, depth, ignorers)


# Option Parsing and Main -----------------------------------------------------
def build_option_parser():
    p = OptionParser("usage: %prog [options] PATTERN")

    # Main options
    p.add_option('--version',
                 action='store_true', default=False,
                 help='print the version and exit')
    p.add_option('-r', '--root-dir', default='.',
                 dest='dir', action='store',
                 help='root the search in DIR (default .)',
                 metavar='DIR')
    p.add_option('-d', '--mindepth', default='0',
                 help='search at minimum N directories deep (default 0)',
                 metavar='N')
    p.add_option('-D', '--maxdepth', default='25',
                 help='search at most N directories deep (default 25)',
                 metavar='N')
    p.add_option('-f', '--follow',
                 action='store_true', default=False,
                 help='follow symlinked directories and search their contents')
    p.add_option('-F', '--no-follow',
                 dest='follow', action='store_false',
                 help="don't follow symlinked directories (default)")
    p.add_option('-l', '--literal',
                 action='store_true', default=False,
                 help='force literal search, even if it looks like a regex')
    p.add_option('-v', '--invert',
                 action='store_true', default=False,
                 help='invert match')
    p.add_option('-e', '--entire',
                 action='store_true', default=False,
                 help='match PATTERN against the entire path string')
    p.add_option('-E', '--non-entire', dest='entire',
                 action='store_false',
                 help='match PATTERN against only the filenames (default)')
    p.add_option('-p', '--full-path', dest='full_path',
                 action='store_true', default=False,
                 help="print the file's full path")
    p.add_option('-P', '--relative-path', dest='full_path',
                 action='store_false',
                 help="print the file's relative path (default)")
    p.add_option('-0', '--print0', dest='zero',
                 action='store_true', default=False,
                 help='separate matches with a null byte in output')

    # Case sensitivity
    g = OptionGroup(p, "Configuring Case Sensitivity")
    g.add_option('-s', '--case-sensitive',
                 dest='case', action='store_const', const=CASE_SENSITIVE,
                 default=CASE_SENSITIVE,
                 help='case sensitive matching (default)')
    g.add_option('-i', '--case-insensitive',
                 dest='case', action='store_const', const=CASE_INSENSITIVE,
                 help='case insensitive matching')
    g.add_option('-S', '--case-smart',
                 dest='case', action='store_const', const=CASE_SMART,
                 help='smart case matching (sensitive if any uppercase chars '
                      'are in the pattern, insensitive otherwise)')
    p.add_option_group(g)

    # Ignoring
    g = OptionGroup(p, "Configuring Ignoring")

    g.add_option('-b', '--binary',
                 dest='binary', action='store_true', default=True,
                 help="allow binary files (default)")

    g.add_option('-B', '--no-binary',
                 dest='binary', action='store_false',
                 help='ignore binary files')

    g.add_option('-I', '--ignore', metavar='PATTERN',
                 action='append', default=[],
                 help="add a pattern to be ignored (can be given multiple times)")

    p.add_option_group(g)

    # Type filtering
    g = OptionGroup(p, "Type Filtering",
                    "Possible types are "
                    "a (all), "
                    "f (files), "
                    "d (dirs), "
                    "r (real), "
                    "s (symlinked), "
                    "e (real files), "
                    "c (real dirs), "
                    "x (symlinked files), "
                    "y (symlinked dirs). "
                    "If multiple types are given they will be unioned together:  "
                    "--type 'es' would match real files and all symlinks.")
    g.add_option('-t', '--type',
                 action='store', default=False, metavar='TYPE(S)',
                 help='match only specific types of things (files, dirs, non-symlinks, symlinks)')
    p.add_option_group(g)

    return p


def build_type_set(types):
    if not types:
        return TYPES_ALL

    result = set()
    for c in types:
        if c not in 'aexcyfdrs':
            die("invalid type specification\n\n"
                "valid types:\n\n"
                "  a (all)\n"
                "  f (files)\n"
                "  d (dirs)\n"
                "  r (real)\n"
                "  s (symlinked)\n"
                "  e (real files)\n"
                "  c (real dirs)\n"
                "  x (symlinked files)\n"
                "  y (symlinked dirs)")

        result = result | {
            'a': TYPES_ALL,

            'e': TYPES_FILE_REAL,
            'x': TYPES_FILE_SYMLINK,
            'c': TYPES_DIR_REAL,
            'y': TYPES_DIR_SYMLINK,

            'f': TYPES_FILE,
            'd': TYPES_DIR,

            'r': TYPES_REAL,
            's': TYPES_SYMLINK,
        }[c.lower()]

    return result


def is_re(s):
    """Try to guess if the string is a regex.
    Err on the side of "True", because treating a literal like a regex only
    slows you down a bit, but the other way around is broken behaviour.
    """

    return not all(c.lower() in string.ascii_letters + '_-' for c in s)


def main():
    global options

    (options, args) = build_option_parser().parse_args()

    if options.version:
        print('friendly-find version %s' % '.'.join(VERSION))
        sys.exit(0)

    # PATTERN
    if len(args) > 1:
        die("only one search pattern can be given")
        sys.exit(1)

    query = args[0] if args else ''

    # --root-dir
    if options.dir is not None:
        if not (os.path.exists(options.dir) and os.path.isdir(options.dir)):
            die('could not change to directory "%s"' % options.dir)

    # --depth
    try:
        options.mindepth = int(options.mindepth)
        options.maxdepth = int(options.maxdepth)
    except ValueError:
        die('depth must be a non-negative integer')

    # --case-*
    if options.case == CASE_SMART:
        if any(c in string.uppercase for c in query):
            options.case = CASE_SENSITIVE
        else:
            options.case = CASE_INSENSITIVE

    # --type
    options.type = build_type_set(options.type)

    # Build the query matcher.
    if options.literal or not is_re(query):
        if options.case == CASE_SENSITIVE:
            literal = query
            query = lambda s: literal in s
        else:
            literal = query.lower()
            query = lambda s: literal in s.lower()
    else:
        if options.case == CASE_SENSITIVE:
            r = re.compile(query)
        else:
            r = re.compile(query, re.IGNORECASE)
        query = lambda s: r.search(s)

    # Go!
    search(query, options.dir)


if __name__ == '__main__':
    import signal


    def sigint_handler(signalnum, frame):
        sys.stdout.write('\n')
        sys.exit(130)


    signal.signal(signal.SIGINT, sigint_handler)

    try:
        main()
    except IOError as e:
        if e.errno != errno.EPIPE:
            raise
        else:
            pass
