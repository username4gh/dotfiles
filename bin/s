#! /usr/bin/env python
# coding=UTF-8

from collections import namedtuple
import optparse
import re
import sys

PY3 = sys.version_info[0] == 3


def identity_function(x):
    return x


if PY3:
    def str2bytes(s):
        return s.encode('utf-8')


    def int2byte(i):
        return bytes((i,))


    def bytes2str(b):
        return b.decode('utf-8')
else:
    str2bytes = identity_function
    int2byte = chr
    bytes2str = identity_function


def tostring(b):
    """ Convert the given bytes or string object to string
    """
    if isinstance(b, bytes):
        return bytes2str(b)
    else:
        return b


MatchResult = namedtuple('MatchResult', ' '.join([
    'matching_line',
    'matching_line_number',
    'matching_column_ranges']))


class ContentMatcher(object):
    def __init__(self,
                 pattern,
                 ignore_case=False,
                 whole_words=False,
                 literal_pattern=False,
                 invert_match=False):
        self.regex = ContentMatcher._create_regex(pattern,
                                                  ignore_case=ignore_case,
                                                  whole_words=whole_words,
                                                  literal_pattern=literal_pattern)
        if invert_match:
            self.match_file = self.inverted_matcher
        else:
            self.match_file = self.matcher

        # Cache frequently used attributes for faster access
        self._finditer = self.regex.finditer
        self._search = self.regex.search

        # Optimize a common case: searching for a simple non-regex string.
        # In this case, we don't need regex matching - using str.find is
        # faster.
        self._find_str = None
        if not ignore_case and not whole_words and ContentMatcher._pattern_is_simple(pattern):
            self._find_str = pattern
            self._find_str_len = len(self._find_str)

    def matcher(self, file_obj):
        for line_number, line in enumerate(file_obj, 1):
            # Iterate over all matches of the pattern in the line,
            # noting each matching column range.
            try:
                if self._find_str:
                    # Make the common case faster: there's no match in this line, so
                    # bail out ASAP.
                    index = line.find(self._find_str, 0)
                    if index == -1:
                        continue
                    col_ranges = []
                    while index >= 0:
                        next_start = index + self._find_str_len
                        col_ranges.append((index, next_start))
                        index = line.find(self._find_str, next_start)
                else:
                    col_ranges = [match.span() for match in self._finditer(line) if match]

                if col_ranges:
                    yield MatchResult(line, line_number, col_ranges)
            except Exception as err:
                print(err)

    def inverted_matcher(self, file_obj):
        for line_number, line in enumerate(file_obj, 1):
            # Invert match: only return lines that don't match the
            # pattern anywhere
            try:
                search_result = self._search(line)

                if search_result is None:
                    yield MatchResult(line, line_number, [])
            except Exception as err:
                print(err)

    @staticmethod
    def _pattern_is_simple(pattern):
        """ A "simple" pattern that can be matched with str.find and doesn't
            require a regex engine.
        """
        return bool(re.match('[\w_]+$', tostring(pattern)))

    @staticmethod
    def _create_regex(pattern,
                      ignore_case=False,
                      whole_words=False,
                      literal_pattern=False):
        """ Utility for creating the compiled regex from pattern and options.
        """
        if literal_pattern:
            pattern = re.escape(pattern)
        if whole_words:
            b = r'\b' if isinstance(pattern, str) else br'\b'
            pattern = b + pattern + b

        regex = re.compile(pattern, re.I if ignore_case else 0)
        return regex


class OutputFormatter:
    def __init__(self,
                 only_matching=False):
        self.only_matching = only_matching

        self.output_stream = sys.stdout

    def emit_matching_line(self, match_result):
        line = match_result.matching_line

        if not self.only_matching:
            self.emit_line(line)
        else:
            # while only_matching we print out all matches line by line, even when multiple matches
            # in the same line, we just split it with '\n'
            for i, (match_start, match_end) in enumerate(match_result.matching_column_ranges):
                self.emit_line(line[match_start:match_end])

    def emit(self, content):
        """ Write the string to the stream.
        """
        self.output_stream.write(tostring(content).strip())

    def emit_line(self, content=''):
        self.output_stream.write(tostring(content).strip() + '\n')


def parse_cmdline(cmdline_args):
    """ Parse the list of command-line options and arguments and return a
        triple: options, args, parser -- the first two being the result of
        OptionParser.parse_args, and the third the parser object itself.`
    """
    optparser = optparse.OptionParser(
        usage='usage: %prog [options] <pattern>',
        description='Grep like tool',
        prog='s',
        add_help_option=False)  # -h is a real option

    optparser.add_option('-h', '--help',
                         action='store_true', dest='help',
                         help='Display this information')
    optparser.add_option('-f', '--file',
                         action='store', dest='input_file', type='string', default=None,
                         help='input file')

    group_searching = optparse.OptionGroup(optparser, 'Regexp selection and interpretation')
    group_searching.add_option('-i', '--ignore-case',
                               action='store_true', dest='ignore_case', default=False,
                               help='Ignore case distinctions in the pattern')
    group_searching.add_option('-w', '--word-regexp',
                               action='store_true', dest='word_regexp', default=False,
                               help='Force the pattern to match only whole words')
    group_searching.add_option('-l', '--literal',
                               action='store_true', dest='literal', default=False,
                               help='Quote all metacharacters; the pattern is literal')
    optparser.add_option_group(group_searching)

    group_miscellaneous = optparse.OptionGroup(optparser, 'Miscellaneous')
    group_miscellaneous.add_option('-v', '--invert-match',
                                   action='store_true', dest='invert_match', default=False,
                                   help='Invert match: show non-matching lines')
    optparser.add_option_group(group_miscellaneous)

    group_output = optparse.OptionGroup(optparser, 'Output control')
    group_output.add_option('-c', '--count',
                            action='store_true', dest='count', default=False,
                            help='print only the count of matching lines')
    group_output.add_option('-o', '--only-matching',
                            action='store_true', dest='only_matching', default=False,
                            help='show only the part of line that matches PATTERN')
    optparser.add_option_group(group_output)

    options, args = optparser.parse_args(cmdline_args)
    return options, args, optparser


def _run(pattern=None,
         output_formatter=None,
         input_file=None,
         ignore_case=False,
         whole_words=False,
         literal_pattern=False,
         invert_match=False,
         count=False,
         only_matching=False):
    """ Returns True if a match was found, False otherwise. """

    # Set up a default output formatter, if none is provided
    if output_formatter is None:
        output_formatter = OutputFormatter(only_matching)

    if pattern is None:
        pattern = b''
    else:
        if isinstance(pattern, bytes):
            pattern = bytes2str(pattern)

    # Set up the content matcher
    matcher = ContentMatcher(pattern=pattern,
                             ignore_case=ignore_case,
                             whole_words=whole_words,
                             literal_pattern=literal_pattern,
                             invert_match=invert_match)

    match_found = False

    file_obj = None

    try:
        if input_file is None:
            file_obj = sys.stdin
        else:
            file_obj = open(input_file)

        matches = list(matcher.match_file(file_obj))

        if matches:
            match_found = True

            if count:
                output_formatter.emit(str(len(matches)))
            else:
                for match in matches:
                    output_formatter.emit_matching_line(match)
        else:
            if count:
                # deal with corner case
                output_formatter.emit('0')
    except (OSError, IOError):
        pass
    finally:
        if file_obj is not None:
            file_obj.close()

    return match_found


def main(argv=sys.argv):
    options, args, opt_parser = parse_cmdline(argv[1:])

    if (len(args) == 0) or options.help:
        opt_parser.print_help()
        return None

    pattern = args[0]

    try:
        _run(pattern=pattern,
             output_formatter=None,
             input_file=options.input_file,
             ignore_case=options.ignore_case,
             whole_words=options.word_regexp,
             literal_pattern=options.literal,
             invert_match=options.invert_match,
             count=options.count)
    except KeyboardInterrupt:
        return 'interrupted - exiting'
    except Exception as err:
        return str('error: %s' % err)


if __name__ == "__main__":
    sys.exit(main())
