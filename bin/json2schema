#! /usr/bin/env python
# coding=utf-8

import getopt
import sys
import json

PY3 = sys.version_info[0] == 3


# TODO deal with null fields that be ignored
class JsonSchemaGenerator:
    def __init__(self):
        self.obj = None
        self.s = None

    def load(self, json_str):
        self.obj = json.loads(json_str)

    def schema(self, schema_str):
        self.s = json.loads(schema_str)

    def set_defaults(self, s):
        default = {}
        if s is not None:
            default['description'] = s['description']
            default['additionalProperties'] = s['additionalProperties']
        return default

    def _handle_dict(self, d, s):
        schema = self.set_defaults(s)
        schema['type'] = 'object'
        schema['properties'] = {}
        for key, value in d.items():
            if s is None:
                new_s = None
            else:
                new_s = s['properties'][key]
            schema['properties'][key] = self._deal(value, new_s)
        return schema

    def _handle_list(self, l, s):
        schema = self.set_defaults(s)
        schema['type'] = 'array'
        schema['properties'] = []
        for value in l:
            schema['properties'].append(self._deal(value))
            break
        return schema

    def _handle_str(self, string, s):
        res = self.set_defaults(s)
        res['type'] = 'string'
        return res

    def _handle_int(self, i, s):
        res = self.set_defaults(s)
        res['type'] = 'integer'
        return res

    def _handle_long(self, i, s):
        res = self.set_defaults(s)
        res['type'] = 'long'
        return res

    def _handle_float(self, f, s):
        res = self.set_defaults(s)
        res['type'] = 'float'
        return res

    def _handle_none(self, f, s):
        res = self.set_defaults(s)
        res['type'] = 'unknown'
        return res

    def _handle_false(self, f, s):
        res = self.set_defaults(s)
        res['type'] = 'boolean'
        return res

    def _handle_true(self, f, s):
        res = self.set_defaults(s)
        res['type'] = 'boolean'
        return res

    def _deal(self, o, s=None):
        if not PY3:
            if isinstance(o, long):
                return self._handle_long(o, s)

        if isinstance(o, (list, tuple)):
            return self._handle_list(o, s)
        elif isinstance(o, dict):
            return self._handle_dict(o, s)
        elif isinstance(o, str):
            return self._handle_str(o, s)
        elif isinstance(o, int):
            return self._handle_int(o, s)
        elif isinstance(o, float):
            return self._handle_float(o, s)
        elif o is None:
            return self._handle_none(o, s)
        elif not o:
            return self._handle_false(o, s)
        elif o:
            return self._handle_true(o, s)

    def generate(self):
        return self._deal(self.obj, self.s)


def usage():
    print(__doc__)


def process_options(argv):
    filename = None
    schema = None
    h = False
    try:
        opts, args = getopt.getopt(argv[1:], "f:s:h", ['filename=', 'schema', 'help'])
    except getopt.GetoptError as err:
        # print help information and exit:
        print(str(err))
        usage()
        sys.exit(2)
    for o, a in opts:
        if o in ("-f", "--filename"):
            filename = a
        elif o in ("-s", "--schema"):
            schema = a
        elif o in ("-h", "--help"):
            h = True
    return filename, schema, h


def main():
    filename, schema, help = process_options(sys.argv)
    if help or filename is None:
        usage()
        sys.exit(0)
    parse(filename, schema)
    #parse('/Users/qptp/Library/Application Support/Google/Chrome/Default/Bookmarks')


def parse(json_str):
    generator = JsonSchemaGenerator()
    generator.load(json_str)
    print(json.dump(generator.generate(), indent=2))


def parse(filename, schema=None):
    generator = JsonSchemaGenerator()
    try:
        h = open(filename, 'r')
    except IOError:
        print("File %s can not be opened for reading" % filename)
        sys.exit(0)

    json_str = h.read()
    h.close()

    if schema is not None:
        try:
            h = open(schema)
        except IOError:
            print("Schema %s can not be opened for reading" % schema)
            sys.exit(0)
        schema_str = h.read()
        generator.schema(schema_str)

    generator.load(json_str)
    print(json.dumps(generator.generate(), indent=2))


if __name__ == '__main__':
    main()
