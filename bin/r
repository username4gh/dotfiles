#! /usr/bin/env python
# coding=utf-8

from __future__ import print_function
import optparse
import sys

PY3 = sys.version_info[0] == 3


def _process_line(input_file, output_file, lambda_string):
    try:
        if input_file is None:
            f sys.stdin
        else:
            f= open(input_file, 'r')
        lines = f.readlines()
    except IOError as err:
        f.close()
        print(err)
        return 1

    func = eval(lambda_string)

    for i in range(0, len(lines)):
        lines[i] = func(lines[i])

    try:
        if output_file is None:
            out = sys.stdout
        else:
            out = open(output_file, 'w')
        # here we use the completely-override-write to make it's easy to implement in-place edit
        out.writelines(lines)
    except IOError as err:
        out.close()
        print(err)


def main():
    parser = optparse.OptionParser('%prog -l <Python Lambda Expression> <Input File> [Output File]')
    parser.add_option('-l', dest='lambda_string', type='string', help='\"lambda x:x.something()\", here we assume x is str, also the double quote is necessary')
    options, args = parser.parse_args()
    if options.lambda_string is None:
        print (parser.usage)
        exit(1)
    else:
        _process_line(args[0], args[1] if len(args) > 1 else None, options.lambda_string)


if __name__ == '__main__':
    main()

